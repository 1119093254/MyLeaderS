package com.multshows.Activity;

import android.app.Dialog;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.facebook.drawee.view.SimpleDraweeView;
import com.google.gson.Gson;
import com.multshows.Beans.OrderAdd;
import com.multshows.Beans.Shows;
import com.multshows.Beans.UserAddress;
import com.multshows.Beans.UserAddressTerm;
import com.multshows.Login_Static;
import com.multshows.R;
import com.multshows.Utils.CLog;
import com.multshows.Utils.Emoji_Change;
import com.multshows.Utils.Json_Utils;
import com.multshows.Utils.MySystemBarTintManage_Utils;
import com.multshows.Utils.OKHttp;
import com.multshows.Utils.SaveSharedPreferences;
import com.multshows.Utils.SubString_Utils;
import com.multshows.Views.Dialog_Hint;
import com.multshows.Views.HintText_Dialog;
import com.zhy.http.okhttp.callback.StringCallback;

import org.json.JSONArray;
import org.json.JSONException;

import okhttp3.Call;

/**
 * 描述：购买商品界面
 * 作者：李萧萧
 * 时间：2016.10.8
 */
public class BuyProduce_Activity extends BaseActivity {
    String AddressId;//当前显示收货地址的id
    RelativeLayout buy_produceLayout;//整个页面布局
    RelativeLayout BuyNumLAyout;//购买数量布局
    RelativeLayout BuyBootomDetial;//购买价格详情
    OrderAdd mOrderAdd;//添加订单对象
    Shows mShows;//闲置详情
    TextView purchase_title;//闲置标题
    TextView price;//闲置价格
    TextView Freight_price;//运费
    TextView FromWhere;//地点
    TextView Idle_num_reduce;//减号
    TextView IdleNum;//数量
    TextView Idle_num_add;//加号
    TextView username;//用户姓名
    TextView userphone;//用户账号
    TextView addressText;//地址
    TextView Pricecount;//商品总额
    TextView ContactsellerText;//运费
    TextView freightPrice;//运费
    TextView countPrice;//总费用
    TextView buyTitle;//购买标题
    TextView Count;//剩余数量
    Button BuyButton;//购买按钮
    TextView addAddressText;//添加收货地址文字
    int idleNum=1;//购买数量
    Dialog mDialog;//消息提示框
    Dialog_Hint mDialogHint;//提示余额不足
    UserAddress mUserAddress;
    SimpleDraweeView image;
    TextView DefaultText;
    RelativeLayout addAddressLayout;//添加收货地址布局
    RelativeLayout namePhoneLayout;//地址收货姓名布局
    RelativeLayout addressTextLayout;//地址文字所在布局
    RelativeLayout addressLayout;//有地址时布局
    RelativeLayout BuyDetailLayout;//有地址时布局
    RelativeLayout my_toplayout;//顶部标题布局
    ImageView Classification_return;
    ImageView ContactsellerImage;
    Emoji_Change mEmoji_change=new Emoji_Change();//表情，匹配符替换类
    SaveSharedPreferences mSharedPreferences=new SaveSharedPreferences();
    //数据集合
    Gson mGson=new Gson();
    int flag=0;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_buy_produce);
        MySystemBarTintManage_Utils manageUtils=new MySystemBarTintManage_Utils();
        manageUtils.setSystemBarTintManage(BuyProduce_Activity.this,R.color.app_topColor);
        Intent intent=getIntent();
        mShows= (Shows) intent.getSerializableExtra("Shows");
        //模拟
        getShipAddress();
        initView();
        initData();
        initListen();

    }

    @Override
    public void findViews() {

    }

    @Override
    public void addListeners() {

    }

    /*
       *初始化数据
       * 无参
        */
    private void initData() {
        mDialog = new HintText_Dialog(BuyProduce_Activity.this, R.style.MyDialog);
        if(mShows.getShowsPhoto()!=null){
            String[] imag = mShows.getShowsPhoto().split(",");
            Uri mUri=Uri.parse(SubString_Utils.getImageUrl(imag[0]));
            image.setImageURI(mUri);
        }
        if (mSharedPreferences.Get_PREFS(BuyProduce_Activity.this, "Type").equals("baby")){
            MySystemBarTintManage_Utils tintManageUtils = new MySystemBarTintManage_Utils();
            //tintManageUtils.setSystemBarTintManage(MainActivity.this, R.color.app_babyColor);
            tintManageUtils.setSystemBarTintManage_noColor(BuyProduce_Activity.this);
            Classification_return.setImageResource(R.drawable.return_arrow);
            ContactsellerImage.setImageResource(R.drawable.redcontact_seller);
            buyTitle.setTextColor(getResources().getColor(R.color.red_grey));
            ContactsellerText.setTextColor(getResources().getColor(R.color.red_grey));
            my_toplayout.setBackgroundResource(R.drawable.classify_topbg);
        }else if(mSharedPreferences.Get_PREFS(BuyProduce_Activity.this, "Type").equals("mom")){
            buy_produceLayout.setBackgroundColor(getResources().getColor(R.color.border_grey));
            BuyDetailLayout.setBackgroundColor(getResources().getColor(R.color.white));
            ContactsellerText.setTextColor(getResources().getColor(R.color.white));
            BuyBootomDetial.setBackgroundColor(getResources().getColor(R.color.white));
            addAddressLayout.setBackgroundColor(getResources().getColor(R.color.white));
            BuyNumLAyout.setBackgroundColor(getResources().getColor(R.color.white));
            addressLayout.setBackgroundColor(getResources().getColor(R.color.white));
            MySystemBarTintManage_Utils tintManageUtils = new MySystemBarTintManage_Utils();
            tintManageUtils.setSystemBarTintManage(BuyProduce_Activity.this, R.color.green);
        }
        if(mShows.getShowsType()==2)
        mSharedPreferences.Save_PREFS(BuyProduce_Activity.this, "idleFresh","yes");
        purchase_title.setText(mEmoji_change.ChangeEmoji(mShows.getInfos()));
        price.setText("¥"+mShows.getPrice()+"");
        Freight_price.setText("（"+mShows.getExpressFee()+"元运费）");
        if(!mShows.getAddress().equals("")){
            FromWhere.setText("来自"+mShows.getAddress());
        }else  FromWhere.setText("");


        Pricecount.setText("¥"+(mShows.getPrice()*idleNum));
        freightPrice.setText("+ ¥"+mShows.getExpressFee()+"");
        countPrice.setText(""+(mShows.getExpressFee()+mShows.getPrice()*idleNum));
        Count.setText("还剩"+mShows.getAmount()+"件");
        //订单对象OrderAdd赋值
        mOrderAdd=new OrderAdd();
        mOrderAdd.setShowsId(mShows.getId());
        mOrderAdd.setBuyerId(Login_Static.myUserID);
        mOrderAdd.setSellerId(mShows.getUser().getUserId());
        mOrderAdd.setPrice(mShows.getPrice()*idleNum);
        mOrderAdd.setRealPrice((mShows.getExpressFee()+mShows.getPrice()*idleNum));
        mOrderAdd.setExpressFee(mShows.getExpressFee());
        mOrderAdd.setSellerId(mShows.getUser().getUserId());
        mOrderAdd.setState(2);

    }
    /*
    *初始化控件
    * 无参
     */
    private void initView() {
        buy_produceLayout= (RelativeLayout) findViewById(R.id.buy_produceLayout);
        BuyBootomDetial= (RelativeLayout) findViewById(R.id.BuyBootomDetial);
        BuyNumLAyout= (RelativeLayout) findViewById(R.id.BuyNumLAyout);
        BuyDetailLayout= (RelativeLayout) findViewById(R.id.BuyDetailLayout);
        Classification_return= (ImageView) findViewById(R.id.Classification_return);
        ContactsellerImage= (ImageView) findViewById(R.id.ContactsellerImage);
        addressLayout= (RelativeLayout) findViewById(R.id.addressLayout);
        purchase_title= (TextView) findViewById(R.id.purchase_title);
        price= (TextView) findViewById(R.id.price);
        Freight_price= (TextView) findViewById(R.id.Freight_price);
        ContactsellerText= (TextView) findViewById(R.id.ContactsellerText);
        Count= (TextView) findViewById(R.id.Count);
        FromWhere= (TextView) findViewById(R.id.fromWhere);
        Idle_num_reduce= (TextView) findViewById(R.id.Idle_num_reduce);
        buyTitle= (TextView) findViewById(R.id.buyTitle);
        IdleNum= (TextView) findViewById(R.id.IdleNum);
        Idle_num_add= (TextView) findViewById(R.id.Idle_num_add);
        DefaultText= (TextView) findViewById(R.id.DefaultText);
        username= (TextView) findViewById(R.id.username);
        userphone= (TextView) findViewById(R.id.userphone);
        addressText= (TextView) findViewById(R.id.addressText);
        Pricecount= (TextView) findViewById(R.id.Pricecount);
        freightPrice= (TextView) findViewById(R.id.freightPrice);
        countPrice= (TextView) findViewById(R.id.countPrice);
        addAddressText= (TextView) findViewById(R.id.addAddressText);
        BuyButton= (Button) findViewById(R.id.BuyButton);
        image= (SimpleDraweeView) findViewById(R.id.purchase_image);
        addAddressLayout= (RelativeLayout) findViewById(R.id.addAddressLayout);
        namePhoneLayout= (RelativeLayout) findViewById(R.id.namePhoneLayout);
        addressTextLayout= (RelativeLayout) findViewById(R.id.addressTextLayout);
        my_toplayout= (RelativeLayout) findViewById(R.id.my_toplayout);
    }
    /**
     * 事件处理
     */
    private void initListen() {
        Classification_return.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });
        //商品数量增加
        Idle_num_add.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
//                Toast.makeText(getContext(), "+++", Toast.LENGTH_SHORT).show();

                if (idleNum < mShows.getAmount()) {
                    idleNum++;
					IdleNum.setText(idleNum + "");
                    Pricecount.setText("¥"+(mShows.getPrice()*idleNum));
                    countPrice.setText(""+(mShows.getExpressFee()+mShows.getPrice()*idleNum));
                }else {
                    mDialog.show();
                    showError("商品数量不能大于库存数量！",0);
                }
            }
        });
        //商品数量减少
        Idle_num_reduce.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (idleNum > 1) {
                    idleNum--;
                    IdleNum.setText(idleNum + "");
                } else {
                    mDialog.show();
                    showError("商品数量不能低于1！",0);

                }
                Pricecount.setText("¥ "+(mShows.getPrice()*idleNum));
                countPrice.setText((mShows.getExpressFee()+mShows.getPrice()*idleNum)+"");
            }
        });

        addAddressLayout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent=null;
                if(addAddressText.getText().equals("新建地址")){
                    intent = new Intent(BuyProduce_Activity.this,Add_NewAddress_Activity.class);
                }
                if (addAddressText.getText().equals("选择收货地址"))
                {
                    intent = new Intent(BuyProduce_Activity.this,My_Information_ShipAddress_Activity.class);
                    intent.putExtra("chioce","yes");
                }
                startActivityForResult(intent,1);
            }
        });
        addressLayout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(BuyProduce_Activity.this,My_Information_ShipAddress_Activity.class);
                intent.putExtra("chioce","yes");
                startActivityForResult(intent,1);
            }
        });
        BuyButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                mDialog.show();
                mOrderAdd.setCount(idleNum);
                HintText_Dialog hint = new HintText_Dialog(BuyProduce_Activity.this, "正在提交...", "");
                BuyButton.setEnabled(false);
                if(mOrderAdd.getAddressId()!=null){
                    String data=mGson.toJson(mOrderAdd);
                    CLog.e("data",data);
                    OKHttp.OkHttpPost("/Order/AddOrder", "", data, new StringCallback() {
                        @Override
                        public void onError(Call call, Exception e, int id) {
                            CLog.e("testing","错误");
                        }

                        @Override
                        public void onResponse(String response, int id) {
                            CLog.e("testinggg","changeNickName:"+response);
                            try {
                                if(Json_Utils.getCode(response)==0){
                                    showError("下订单成功",1);
                                    BuyButton.setEnabled(true);
                                }else if(Json_Utils.getCode(response)==1016){
                                    mDialog.dismiss();
                                    mDialogHint = new Dialog_Hint(BuyProduce_Activity.this, 0,
                                            "余额不足，是否前往充值?", new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            BuyButton.setEnabled(true);
                                            mDialogHint.dismiss();
                                            Intent intent = new Intent(BuyProduce_Activity.this, My_MyWallet_Activity.class);
                                            startActivity(intent);
                                        }
                                    });
                                    mDialogHint.show();

                                }else {
                                    showError(Json_Utils.getMessage(response),0);
                                    BuyButton.setEnabled(true);
                                }
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        }
                    });
                }else {
                    mDialog.show();
                    showError("请选择收货地址！",0);
                }

            }
        });
    }
    /**
     * 返回的数据处理
     * @param requestCode
     * @param resultCode
     * @param data
     */
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if(requestCode==1) {
            switch (resultCode) {
                case 5:
                    mUserAddress = (UserAddress) data.getSerializableExtra("mUserAddress");
                    addAddressLayout.setVisibility(View.GONE);
                    addressLayout.setVisibility(View.VISIBLE);
                    AddressId=mUserAddress.getId();
                    username.setText(mUserAddress.getReceiverName());
                    userphone.setText(mUserAddress.getMobile());
                    addressText.setText(mUserAddress.getProvinceName() + " " + mUserAddress.getCityname() + " " + mUserAddress.getDistrictName() + " " + mUserAddress.getDetailAddress());
                    mOrderAdd.setAddressId(mUserAddress.getId());
                    if(mUserAddress.getIsDefault().equals("1")){
                        DefaultText.setVisibility(View.VISIBLE);
                    }else {
                        DefaultText.setVisibility(View.INVISIBLE);
                    }
                    break;
                case 6:
                    mUserAddress = (UserAddress) data.getSerializableExtra("mUserAddress");
                    addAddressLayout.setVisibility(View.GONE);
                    addressLayout.setVisibility(View.VISIBLE);
                    username.setText(mUserAddress.getReceiverName());
                    userphone.setText(mUserAddress.getMobile());
                    addressText.setText(mUserAddress.getProvinceName() + " " + mUserAddress.getCityname() + " " + mUserAddress.getDistrictName() + " " + mUserAddress.getDetailAddress());
                    mOrderAdd.setAddressId(mUserAddress.getId());
                    if(mUserAddress.getIsDefault().equals("1")){
                        DefaultText.setVisibility(View.VISIBLE);
                    }else {
                        DefaultText.setVisibility(View.INVISIBLE);
                    }
                    break;
            }
        }
    }

    /**
     * 联系商家
     * @param view
     */
    public void chat(View view) {
        Intent intent=new Intent(BuyProduce_Activity.this,Chat_Activity.class);
        intent.putExtra("userId",mShows.getUser().getUserId());
        startActivity(intent);
    }
    /*
       *获取收货地址
       * 无参
        */
    private void getShipAddress(){
        UserAddressTerm userAddressTerm=new UserAddressTerm(Login_Static.myUserID,-1,0,0);
        String data=mGson.toJson(userAddressTerm);
        CLog.e("testing","data="+data);
        OKHttp.OkHttpPost("/User/GetAddressList", "", data, new StringCallback() {
            @Override
            public void onError(Call call, Exception e, int id) {
                CLog.e("testing","获取收货地址列表失败"+e.toString());
            }

            @Override
            public void onResponse(String response, int id) {
                CLog.e("testing","获取收货地址列表"+response);
                try {
                    if(Json_Utils.getCode(response)==0){
                        addAddressLayout.setVisibility(View.GONE);
                        addressLayout.setVisibility(View.VISIBLE);
                        JSONArray jsonArray=new JSONArray(Json_Utils.getTemplate(response));
                        for (int i=0;i<jsonArray.length();i++){
                            mUserAddress=mGson.fromJson(jsonArray.getString(i),UserAddress.class);
                            if(mUserAddress.getIsDefault().equals("1")){
                                DefaultText.setVisibility(View.VISIBLE);
                                AddressId=mUserAddress.getId();
                                username.setText(mUserAddress.getReceiverName());
                                userphone.setText(mUserAddress.getMobile());
                                addressText.setText(mUserAddress.getProvinceName()+mUserAddress.getCityname()+mUserAddress.getDistrictName()+mUserAddress.getDetailAddress());
                                mOrderAdd.setAddressId(mUserAddress.getId());
                                break;
                            }
                            if(i==jsonArray.length()-1){
                                addressLayout.setVisibility(View.GONE);
                                addAddressLayout.setVisibility(View.VISIBLE);
                                addAddressText.setText("选择收货地址");
                            }
                        }
                        if(jsonArray.length()==0){
                            addAddressLayout.setVisibility(View.VISIBLE);
                            addressLayout.setVisibility(View.GONE);
                        }
                    }else if(Json_Utils.getCode(response)==1007){
                         addAddressLayout.setVisibility(View.VISIBLE);
                        addressLayout.setVisibility(View.GONE);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        });

    }
    /*
      *获取收货地址，用来检测选中的收货地址是否依然存在
      * 无参
       */
    private void getShipAddress1(){
        UserAddressTerm userAddressTerm=new UserAddressTerm(Login_Static.myUserID,-1,0,0);
        String data=mGson.toJson(userAddressTerm);
        CLog.e("testing","data="+data);
        OKHttp.OkHttpPost("/User/GetAddressList", "", data, new StringCallback() {
            @Override
            public void onError(Call call, Exception e, int id) {
                CLog.e("testing","获取收货地址列表失败"+e.toString());
            }

            @Override
            public void onResponse(String response, int id) {
                CLog.e("testing","获取收货地址列表"+response);
                try {
                    if(Json_Utils.getCode(response)==0){
                        addAddressLayout.setVisibility(View.GONE);
                        addressLayout.setVisibility(View.VISIBLE);

                        JSONArray jsonArray=new JSONArray(Json_Utils.getTemplate(response));
                        Boolean IsTrue=false;//是否存在当前地址
                        for (int i=0;i<jsonArray.length();i++){
                            mUserAddress=mGson.fromJson(jsonArray.getString(i),UserAddress.class);
                            if(mUserAddress.getId().equals(AddressId)){
                                IsTrue=true;
                            }

                        }
                        if(!IsTrue){
                            getShipAddress();
                        }else {
                            if(jsonArray.length()==0){
                                addAddressLayout.setVisibility(View.VISIBLE);
                                addressLayout.setVisibility(View.GONE);
                                addAddressText.setText("新建地址");
                            }
                        }

                    }else if(Json_Utils.getCode(response)==1007){
                         addAddressLayout.setVisibility(View.VISIBLE);
                        addressLayout.setVisibility(View.GONE);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        });

    }
    //发布结果提示
    public void showError(String errorString, final int is) {
        String isString=null;
        if(is==1){
            isString="success";
        }
        if(is==0){
            isString="fail";
        }
        HintText_Dialog hint = new HintText_Dialog(BuyProduce_Activity.this, errorString, isString);
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                //得到返回值后，2秒后加载框消失
                mDialog.dismiss();
                if(is==1){
                    Intent mIntent=new Intent(BuyProduce_Activity.this,My_OrderList_Activity.class);
                    startActivity(mIntent);
                    mSharedPreferences.Save_PREFS(BuyProduce_Activity.this,"idleFresh","yes");
                    finish();
                }
            }
        }, 2000);
    }

    @Override
    protected void onResume() {
        super.onResume();
        if(flag>=1){
            if(!userphone.getText().equals(""))
            getShipAddress1();
        }else flag++;

    }
}
