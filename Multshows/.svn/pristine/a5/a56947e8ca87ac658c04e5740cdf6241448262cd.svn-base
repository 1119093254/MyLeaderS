package com.multshows.Activity;

import android.app.Dialog;
import android.os.Bundle;
import android.os.Handler;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.google.gson.Gson;
import com.multshows.Adapter.My_Interests_Adapter;
import com.multshows.Beans.My_Interests_Beans;
import com.multshows.Beans.UserTag;
import com.multshows.Beans.UserTagDictionary;
import com.multshows.Login_Static;
import com.multshows.R;
import com.multshows.Utils.CLog;
import com.multshows.Utils.Json_Utils;
import com.multshows.Utils.MomORBaby_Utils;
import com.multshows.Utils.MySystemBarTintManage_Utils;
import com.multshows.Utils.OKHttp;
import com.multshows.Utils.SaveSharedPreferences;
import com.multshows.Views.Dialog_Interest;
import com.multshows.Views.HintText_Dialog;
import com.multshows.Views.MyApplication;
import com.multshows.Views.MyListView;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.StringCallback;

import org.json.JSONArray;
import org.json.JSONException;

import java.util.ArrayList;
import java.util.List;

import okhttp3.Call;

/**
 * 我的——兴趣标签
 */
public class My_Interests_Activity extends AppCompatActivity implements My_Interests_Adapter.AddNotific{
    //控件
    ImageView mReturn;//返回
    RelativeLayout mReturnLayout;//顶部布局
    RelativeLayout mParentLayout;//父布局
    TextView mTopTitle;//大标题
    MyListView mListView;
    Button mButton;
    RelativeLayout mAdd;//自定义添加标签
    //父布局
    RelativeLayout mParents;
    //适配器
    My_Interests_Adapter mInterestsAdapter;
    //数据集合
    List<My_Interests_Beans> mBeansList=new ArrayList<>();
    List<UserTag> mBeansList_=new ArrayList<>();//访问网络的已选中集合
    List<List<My_Interests_Beans>> mList=new ArrayList<>();
    List<My_Interests_Beans> beans;
    Dialog_Interest mDialog;
    Dialog mTextDialog;
    Gson mGson=new Gson();
    SaveSharedPreferences mSharedPreferences=new SaveSharedPreferences();
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_my_interests);
        MySystemBarTintManage_Utils manageUtils=new MySystemBarTintManage_Utils();
        manageUtils.setSystemBarTintManage(My_Interests_Activity.this, R.color.app_topColor);

        mParents= (RelativeLayout)findViewById(R.id.My_Interest_ParentsLayout);
        String type=mSharedPreferences.Get_PREFS(My_Interests_Activity.this,"Type");//代表此页妈妈界面还是宝宝页面unlogin没登录
        if("mom".equals(type)){
            //妈妈端
            mParents.setBackgroundColor(getResources().getColor(R.color.background_grey));
        }else if("baby".equals(type)){
            //宝宝端
            mParents.setBackgroundColor(getResources().getColor(R.color.background_alight_2));
        }
        initView();
        initData();
        initListen();

    }

    /**
     * 初始化
     */
    private void initView() {
        mReturn= (ImageView) findViewById(R.id.My_Interest_return);
        mReturnLayout= (RelativeLayout) findViewById(R.id.My_Interest_TopLayout);
        mParentLayout= (RelativeLayout) findViewById(R.id.My_Interest_ParentsLayout);
        mTopTitle= (TextView) findViewById(R.id.My_Interest_TopTitle);
        mListView= (MyListView) findViewById(R.id.My_Interest_ListView);
        mButton= (Button) findViewById(R.id.My_Interest_Button);
        mAdd= (RelativeLayout) findViewById(R.id.My_Interest_AddInterests);

        MomORBaby_Utils momORBabyUtils=new MomORBaby_Utils();
        momORBabyUtils.isMomORBaby(My_Interests_Activity.this,mReturnLayout,mParentLayout,mReturn,mTopTitle);
    }

    /**
     * 数据处理
     */
    private void initData() {
        //模拟数据

       // dataDispose();
        mInterestsAdapter=new My_Interests_Adapter(My_Interests_Activity.this,mBeansList);
        mListView.setAdapter(mInterestsAdapter);
    }

    /**
     * 事件监听
     */
    private void initListen() {
        //返回
        mReturn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                finish();
            }
        });
        //保存
        mButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                mButton.setEnabled(false);
                mTextDialog=new HintText_Dialog(My_Interests_Activity.this,R.style.MyDialog);
                mTextDialog.show();
                HintText_Dialog mHintText_dialog=new HintText_Dialog(My_Interests_Activity.this,"保存中...","");
                mBeansList_.clear();
                My_Interests_Beans b;
                for (int i = 0; i < mBeansList.size() ; i++) {
                    b=mBeansList.get(i);
                    if(b.isFlag()){
                        UserTag bean=new UserTag(Login_Static.myUserID,b.getId(),b.getContent());
                        mBeansList_.add(bean);
                    }
                }
                if(mBeansList_.size()>3){
                    HintText_Dialog mHintText=new HintText_Dialog(My_Interests_Activity.this,"最多选择三个标签","fail");
                    new Handler().postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            //得到返回值后，2秒后加载框消失
                            mTextDialog.dismiss();
                            mButton.setEnabled(true);
                        }
                    }, 2000);
                }else {
                    addUserTag(mBeansList_);
                }

            }
        });
        //添加自定义标签
        mAdd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                mDialog=new Dialog_Interest(My_Interests_Activity.this, 0, new Dialog_Interest.EditTextContent() {
                    @Override
                    public void getEditText(String text) {
                        boolean isOk=true;
                        for (int i = 0; i <mBeansList.size() ; i++) {
                            if(mBeansList.get(i).getContent().equals(text)){
                                isOk=false;
                            }
                        }
                        if(isOk) {
                            addTag(text);
                        }else {
                            mTextDialog=new HintText_Dialog(My_Interests_Activity.this,R.style.MyDialog);
                            mTextDialog.show();
                            HintText_Dialog mHintText_dialog=new HintText_Dialog(My_Interests_Activity.this,
                                    "不能添加重复标签","fail");
                            new Handler().postDelayed(new Runnable() {
                                @Override
                                public void run() {
                                    mTextDialog.dismiss();
                                }
                            },2000);
                        }
                    }
                });
                mDialog.show();
            }
        });


    }

    @Override
    protected void onResume() {
        super.onResume();
        getUserTag();
    }

    /**
     * 数据整理
     */
    private void dataDispose(){
        mList.clear();
        beans = new ArrayList<>();
        for (int i=0;i<mBeansList.size();i++){
            beans.add(mBeansList.get(i));
            if(i%5==4){
                mList.add(beans);
                beans = new ArrayList<>();
            }else if(i==mBeansList.size()-mBeansList.size()%5){
                beans = new ArrayList<>();
                for(int j=mBeansList.size()-mBeansList.size()%5;j<mBeansList.size();j++){
                    beans.add(mBeansList.get(j));
                }
                mList.add(beans);
                beans = new ArrayList<>();
            }
        }
    }
    @Override
    public void putMessage(boolean flag) {
        if(flag){
            mButton.setEnabled(true);
            mButton.setBackgroundResource(R.color.text_green);
            mButton.setTextColor(getResources().getColor(R.color.white));
        }else {
            mButton.setEnabled(false);
            mButton.setBackgroundResource(R.color.button_grey);
            mButton.setTextColor(getResources().getColor(R.color.text_white_c));
        }
    }

    /**
     * 获取标签
     */
    private void getUserTag(){
        MyApplication myApplication= (MyApplication) getApplication();
        OkHttpUtils.get().url(myApplication.getUrl()+"/User/ListTagDictionaryAll")
                .addParams("userid", Login_Static.myUserID)
                .addParams("pageindex","0")
                .addParams("pagesize","0")
                .build()
                .execute(new StringCallback() {
                    @Override
                    public void onError(Call call, Exception e, int id) {
                        CLog.e("testing","获取用户标签失败:"+e.toString());
                    }

                    @Override
                    public void onResponse(String response, int id) {
                        CLog.e("testing","获取用户标签:"+response);
                        try {
                            if(Json_Utils.getCode(response)==0){
                                mBeansList.clear();
                                JSONArray jsonArray = new JSONArray(Json_Utils.getTemplate(response));
                                for (int i = 0; i < jsonArray.length(); i++) {
                                    UserTagDictionary userTag = mGson.fromJson(jsonArray.getString(i), UserTagDictionary.class);
                                    boolean flag=false;
                                    if(userTag.getState()==1){
                                        flag = userTag.getIsOwner() != 0;
                                        My_Interests_Beans beans = new My_Interests_Beans(userTag.getId(), userTag.getUserId(),
                                                "", userTag.getTagName(),flag);
                                        mBeansList.add(beans);
                                    }
                                }
                                //dataDispose();
                                mInterestsAdapter=new My_Interests_Adapter(My_Interests_Activity.this,mBeansList);
                                mListView.setAdapter(mInterestsAdapter);
                                mInterestsAdapter.notifyDataSetChanged();
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                });
    }


    /**
     * 添加兴趣标签
     */
    private void addTag(final String content){
       UserTagDictionary userTagDictionary=new UserTagDictionary();
        userTagDictionary.setUserId(Login_Static.myUserID);
        userTagDictionary.setTagName(content);
        String data=mGson.toJson(userTagDictionary);
        OKHttp.OkHttpPost("/User/AddTagDictionary", "", data, new StringCallback() {
            @Override
            public void onError(Call call, Exception e, int id) {
                CLog.e("testing","添加用户兴趣标签失败:"+e.toString());
            }

            @Override
            public void onResponse(String response, int id) {
                CLog.e("testing","添加用户兴趣标签:"+response);
                try {
                    if(Json_Utils.getCode(response)==0) {
                        getUserTag();
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        });


    }
    /**
     * 添加用户标签
     */
    private void addUserTag(List<UserTag> tag){
        String data=mGson.toJson(tag);
        CLog.e("testing","添加用户标签data:"+data);
        OKHttp.OkHttpPost("/User/AddUserTagSum", "", data, new StringCallback() {
            @Override
            public void onError(Call call, Exception e, int id) {
                CLog.e("testing","添加用户标签失败:"+e.toString());
                HintText_Dialog mHintText_dialog=new HintText_Dialog(My_Interests_Activity.this,"未知异常","fail");
                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        //得到返回值后，2秒后加载框消失
                        mTextDialog.dismiss();
                        mButton.setEnabled(true);
                    }
                }, 2000);
            }

            @Override
            public void onResponse(String response, int id) {
                CLog.e("testing","添加用户标签:"+response);
                try {
                    if(Json_Utils.getCode(response)==0){
                        HintText_Dialog mHintText_dialog=new HintText_Dialog(My_Interests_Activity.this,"保存成功","success");
                        new Handler().postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                //得到返回值后，2秒后加载框消失
                                mTextDialog.dismiss();
                                mButton.setEnabled(true);
                                finish();
                            }
                        }, 2000);
                    }else {
                        HintText_Dialog mHintText_dialog=new HintText_Dialog(My_Interests_Activity.this,"保存失败","fail");
                        new Handler().postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                //得到返回值后，2秒后加载框消失
                                mTextDialog.dismiss();
                                mButton.setEnabled(true);
                            }
                        }, 2000);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        });

    }


}
