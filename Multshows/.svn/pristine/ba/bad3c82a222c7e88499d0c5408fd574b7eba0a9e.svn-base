package com.multshows.Activity;

import android.app.Dialog;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.facebook.drawee.view.SimpleDraweeView;
import com.google.gson.Gson;
import com.multshows.Beans.Order;
import com.multshows.Beans.OrderEvent_Model;
import com.multshows.Beans.OrderEvent_Model2;
import com.multshows.Beans.ShowsBase;
import com.multshows.Beans.User;
import com.multshows.Beans.UserAddress;
import com.multshows.Beans.UserBase;
import com.multshows.Login_Static;
import com.multshows.R;
import com.multshows.Utils.CLog;
import com.multshows.Utils.Json_Utils;
import com.multshows.Utils.MomORBaby_Utils;
import com.multshows.Utils.MySystemBarTintManage_Utils;
import com.multshows.Utils.SaveSharedPreferences;
import com.multshows.Utils.SubString_Utils;
import com.multshows.Utils.Time_Now;
import com.multshows.Views.Dialog_Hint;
import com.multshows.Views.HintText_Dialog;
import com.multshows.Views.MyApplication;
import com.multshows.Views.RechangeNumber_Pop;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.StringCallback;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.json.JSONException;

import java.math.BigDecimal;
import java.text.DecimalFormat;

import okhttp3.Call;

/**
 * 订单详情
 */
public class OrderInformation_out_Activity extends AppCompatActivity {
    //控件
    ImageView mReturn;//返回
    RelativeLayout mReturnLayout;//顶部布局
    RelativeLayout mParentLayout;//父布局
    TextView mTopTitle;//大标题
    SimpleDraweeView mPhoto;//商品展示
    TextView mTitle;//商品名称
    TextView mMoney;//商品价格
    TextView mYunFei;//商品运费
    TextView mUserName;//收货人
    TextView mUserAddress;//收货地址
    TextView mSoldNickName;//卖家昵称
    TextView mNumber;//订单编号
    TextView mTime;//成交时间

    LinearLayout mChat;//联系买家
    ImageView mChatImage;//
    TextView mChatText;
    SaveSharedPreferences mSharedPreferences=new SaveSharedPreferences();
    String type;

    RelativeLayout mKDNameLayout;//快递公司布局
    RelativeLayout mKDNumberLayout;//快递单号布局
    TextView mKDName;//快递公司
    TextView mKDNumber;//快递单号
    TextView mFei;//手续费
    TextView mAllMoney;//商品总价
    TextView mRealMoney;//实收金额
    TextView mOrderType;//订单状态
    TextView mOrderNumber;//商品数量

    TextView mOutCancel;

    LinearLayout mBottomLayout;//底部布局
    LinearLayout mBtn_1;//左侧按钮
    LinearLayout mBtn_2;//右侧按钮
    TextView mTextView_1;//左侧按钮文字
    TextView mTextView_2;//右侧按钮文字
    int orderType;//订单状态

    Intent mIntent;
    String orderID="";
    MyApplication mMyApplication;
    Gson mGson=new Gson();
    Dialog mDialog;
    Order order;
    int positions_;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_order_information_out);
        MySystemBarTintManage_Utils manageUtils=new MySystemBarTintManage_Utils();
        manageUtils.setSystemBarTintManage(OrderInformation_out_Activity.this,R.color.app_topColor);
        EventBus.getDefault().register(this);
        mMyApplication= (MyApplication) getApplication();
        initView();
        type=mSharedPreferences.Get_PREFS(OrderInformation_out_Activity.this,"Type");//代表此页妈妈界面还是宝宝页面unlogin没登录
        if("mom".equals(type)) {
            //妈妈端

        }else {
            //宝宝端
            mChatImage.setImageResource(R.drawable.redcontact_seller);
        }
        initData();
        initListen();

    }

    /**
     * 初始化
     */
    private void initView() {
        mReturn= (ImageView) findViewById(R.id.OrderInformation_return);
        mChat= (LinearLayout) findViewById(R.id.OrderInformation_out_CallChat);
        mChatImage= (ImageView) findViewById(R.id.OrderInformation_out_CallChatImage);
        mChatText= (TextView) findViewById(R.id.OrderInformation_out_CallChatText);
        mReturnLayout= (RelativeLayout) findViewById(R.id.OrderInformation_returnLayout);
        mParentLayout= (RelativeLayout) findViewById(R.id.OrderInformation_ParentsLayout);
        mTopTitle= (TextView) findViewById(R.id.OrderInformation_TopTitle);
        mPhoto= (SimpleDraweeView) findViewById(R.id.OrderInformation_photo);
        mTitle= (TextView) findViewById(R.id.OrderInformation_title);
        mMoney= (TextView) findViewById(R.id.OrderInformation_money);
        mYunFei= (TextView) findViewById(R.id.OrderInformation_out_YunFei);
        mUserName= (TextView) findViewById(R.id.OrderInformation_userName);
        mUserAddress= (TextView) findViewById(R.id.OrderInformation_userAddress);
        mSoldNickName= (TextView) findViewById(R.id.OrderInformation_soldNickName);
        mNumber= (TextView) findViewById(R.id.OrderInformation_Number);
        mTime= (TextView) findViewById(R.id.OrderInformation_Time);
        mKDNameLayout= (RelativeLayout) findViewById(R.id.OrderInformation_soldKDNameLayout);
        mKDNumberLayout= (RelativeLayout) findViewById(R.id.OrderInformation_soldKDNumberLayout);
        mKDName= (TextView) findViewById(R.id.OrderInformation_soldKDName);
        mKDNumber= (TextView) findViewById(R.id.OrderInformation_soldKDNumber);
        mFei= (TextView) findViewById(R.id.OrderInformation_SXFei);
        mAllMoney= (TextView) findViewById(R.id.OrderInformation_out_ALLMoney);
        mRealMoney= (TextView) findViewById(R.id.OrderInformation_out_RealMoney);
        mOrderType= (TextView) findViewById(R.id.OrderInformation_out_StateType);
        mOrderNumber= (TextView) findViewById(R.id.OrderInformation_out_ShowsNumber);

        mBottomLayout= (LinearLayout) findViewById(R.id.OrderInformation_out_BottomLayout);
        mBtn_1= (LinearLayout) findViewById(R.id.OrderInformation_out_BottomLayout_Btn1);
        mBtn_2= (LinearLayout) findViewById(R.id.OrderInformation_out_BottomLayout_Btn2);
        mTextView_1= (TextView) findViewById(R.id.OrderInformation_out_BottomLayout_Text1);
        mTextView_2= (TextView) findViewById(R.id.OrderInformation_out_BottomLayout_Text2);
        mOutCancel= (TextView) findViewById(R.id.OrderInformation_out_Cancel);

        MomORBaby_Utils momORBabyUtils=new MomORBaby_Utils();
        momORBabyUtils.isMomORBaby(OrderInformation_out_Activity.this,mReturnLayout,mParentLayout,mReturn,mTopTitle,mChatText);
    }

    /**
     * 数据处理
     */
    private void initData() {
        mIntent=getIntent();
        orderID=mIntent.getStringExtra("orderId");
        positions_=mIntent.getIntExtra("position",0);
        getOrderInformetion();
        mTitle.setText("");
        mMoney.setText("¥");
        mYunFei.setText("0.00");
        mUserName.setText("");
        mUserAddress.setText("");
        mSoldNickName.setText("");
        mNumber.setText("");
        mTime.setText("");
    }

    /**
     * 事件监听
     */
    private void initListen() {
        //返回
        mReturn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                EventBus.getDefault().post(new OrderEvent_Model(order,positions_,"order_out"));
                finish();
            }
        });
        //左侧按钮点击事件
        mBtn_1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String texts=mTextView_1.getText().toString();
                if("关闭交易".equals(texts)){
                    setOrderState(orderID,1);
                }
            }
        });
        //右侧按钮点击事件
        mBtn_2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String texts=mTextView_2.getText().toString();
                if("编辑".equals(texts)){
                    Intent intent = new Intent(OrderInformation_out_Activity.this, My_Order_Editor_Activity.class);
                    intent.putExtra("orderBean",order);
                    intent.putExtra("position",positions_);
                    intent.putExtra("types",1);
                    startActivity(intent);
                }else if("发货".equals(texts)){
                    Intent intent = new Intent(OrderInformation_out_Activity.this, My_Order_SendOut_Activity.class);
                    intent.putExtra("orderBean",order);
                    intent.putExtra("position",positions_);
                    intent.putExtra("types",1);
                    startActivity(intent);
                }else if("查看物流".equals(texts)){
                    Intent intent = new Intent(OrderInformation_out_Activity.this, My_Order_Logistics_Activity.class);
                    intent.putExtra("order",order);
                    startActivity(intent);
                }
            }
        });
        //联系买家
        mChat.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                UserBase buyer=null;
                if(order!=null){
                    buyer=order.getBuyer();
                }
                if(buyer!=null) {
                    Intent intent = new Intent(OrderInformation_out_Activity.this, Chat_Activity.class);
                    intent.putExtra("userId", buyer.getUserId());
                    startActivity(intent);
                }
            }
        });
    }
    @Subscribe
    public void onEvent(OrderEvent_Model2 model) {
        int po=model.getPosition();
        if("Price2".equals(model.getFlag())){
            CLog.e("testing","修改价格到了"+model.getPosition()+"||"+Double.parseDouble(model.getUrl())+":"+
                    Double.parseDouble(model.getIdle_Place()));
            order.setPrice(Double.parseDouble(model.getUrl()));
            order.setExpressFee(Double.parseDouble(model.getIdle_Place()));
            order.setRealPrice(Double.parseDouble(model.getUrl())+
                    Double.parseDouble(model.getIdle_Place()));

            double real=0;
            if(order.getCount()!=0)
                real=div(order.getPrice(),order.getCount(),2);
            mMoney.setText("¥"+real);
            mAllMoney.setText("¥"+order.getPrice());
            mYunFei.setText("¥"+model.getIdle_Place());
            DecimalFormat df=new DecimalFormat("0.##");
            String sMoney = df.format(order.getRealPrice()-order.getTransFee());
            mRealMoney.setText("¥"+sMoney);
            double real_0=0;
            if(order.getCount()!=0)
                real_0=div(order.getRealPrice(),20,2);
            mFei.setText("-¥"+real_0);
        }else if("Express2".equals(model.getFlag())){
            CLog.e("testing","修改物流到了"+po+"||"+model.getUrl()+":"+
                    model.getIdle_Place());
            order.setState(4);//"已发货"
            order.setStateName("已发货");
            order.setExpressName(model.getUrl());
            order.setExpressNumber(model.getIdle_Place());
            mKDNameLayout.setVisibility(View.VISIBLE);
            mKDNumberLayout.setVisibility(View.VISIBLE);
            mKDName.setText(order.getExpressName());
            mKDNumber.setText(order.getExpressNumber());
            mBottomLayout.setVisibility(View.VISIBLE);
            mBtn_1.setVisibility(View.GONE);
            mOrderType.setText("待收货");
            mTextView_2.setText("查看物流");
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        EventBus.getDefault().unregister(this);
    }

    /**
     * 查看详情
     */
    private void getOrderInformetion(){
        OkHttpUtils.get().url(mMyApplication.getUrl()+"/Order/GetOrder")
                .addParams("orderId",orderID)
                .build()
                .execute(new StringCallback() {
                    @Override
                    public void onError(Call call, Exception e, int id) {
                        CLog.e("testing","获取订单详情失败"+e.toString());
                    }

                    @Override
                    public void onResponse(String response, int id) {
                        CLog.e("testing","获取订单详情"+response);
                        try {
                            if(Json_Utils.getCode(response)==0){
                                order=mGson.fromJson(Json_Utils.getTemplate(response),Order.class);
                                orderType=order.getState();
                                ShowsBase show=order.getShows();
                                UserBase buyer=order.getBuyer();
                                UserBase seller=order.getSeller();
                                UserAddress address=order.getAddress();
                                mTitle.setText(show.getTitle());

                                mOrderNumber.setText("x"+order.getCount());
                                mYunFei.setText("¥"+order.getExpressFee());
                                mUserName.setText(buyer.getNickName());
                                mUserAddress.setText(address.getDetailAddress());
                                mSoldNickName.setText(seller.getNickName());
                                mNumber.setText(order.getOrderNumber());
                                mTime.setText(Time_Now.getStringTime(Integer.parseInt(order.getOrderTime())));
                                if(show.getShowsPhoto()!=null && !"null".equals(show.getShowsPhoto())){
                                    mPhoto.setImageURI(Uri.parse(SubString_Utils.getImageUrl(show.getShowsPhoto())));
                                }else {
                                    mPhoto.setImageURI(Uri.parse(""));
                                }
                                mFei.setText("-¥"+order.getTransFee());
                                double real=0;
                                if(order.getCount()!=0)
                                real=div(order.getPrice(),order.getCount(),2);
                                mMoney.setText("¥"+real);
                                mAllMoney.setText("¥"+order.getPrice());
                                DecimalFormat df=new DecimalFormat("0.##");
                                String sMoney = df.format(order.getRealPrice()-order.getTransFee());
                                mRealMoney.setText("¥"+sMoney);

                                if(order.getState()==4){
                                    //已发货
                                    mKDNameLayout.setVisibility(View.VISIBLE);
                                    mKDNumberLayout.setVisibility(View.VISIBLE);
                                    mKDName.setText(order.getExpressName());
                                    mKDNumber.setText(order.getExpressNumber());

                                    mBottomLayout.setVisibility(View.VISIBLE);
                                    mBtn_1.setVisibility(View.GONE);
                                    mOrderType.setText("待收货");
                                    mTextView_2.setText("查看物流");
                                }else {
                                    mKDNameLayout.setVisibility(View.GONE);
                                    mKDNumberLayout.setVisibility(View.GONE);
                                    //订单状态 0全部 1已取消 2已拍下/待付款 3已付款/待发货 4已发货/待收货 5已收货
                                    if(orderType==1){
                                        //已取消
                                        mOrderType.setText("已取消");
                                        mOutCancel.setText("取消时间");
                                        mBottomLayout.setVisibility(View.GONE);
                                    }else if(orderType==5){
                                        //已收货
                                        mOrderType.setText("已收货");
                                        mBottomLayout.setVisibility(View.GONE);
                                    }else if(orderType==2){
                                        //已拍下/待付款
                                        mOrderType.setText("待付款");
                                        mBottomLayout.setVisibility(View.VISIBLE);
                                        mTextView_1.setText("关闭交易");
                                        mTextView_2.setText("编辑");
                                    }else if(orderType==3){
                                        //已付款/待发货
                                        mOrderType.setText("已付款");
                                        mBottomLayout.setVisibility(View.VISIBLE);
                                        mTextView_1.setText("关闭交易");
                                        mTextView_2.setText("发货");
                                    }
                                }
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }

                    }
                });
    }

    /**
     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指
     * 定精度，以后的数字四舍五入。
     * @param v1 被除数
     * @param v2 除数
     * @param scale 表示表示需要精确到小数点以后几位。
     * @return 两个参数的商
     */
    public double div(double v1, double v2, int scale) {
        if (scale < 0) {
            throw new IllegalArgumentException(
                    "The scale must be a positive integer or zero");
        }
        BigDecimal b1 = new BigDecimal(Double.toString(v1));
        BigDecimal b2 = new BigDecimal(Double.toString(v2));
        return b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).doubleValue();
    }
    //修改订单状态
    private void setOrderState(String id, final int state){
        CLog.e("testing","修改订单状态"+id+":::"+state);
        OkHttpUtils.get()
                .url(mMyApplication.getUrl()+"/Order/ChangeOrderState")
                .addParams("orderId",id)
                .addParams("state",state+"")
                .build()
                .execute(new StringCallback() {
                    @Override
                    public void onError(Call call, Exception e, int id) {
                        CLog.e("testing","修改订单状态失败"+e.toString());
                    }

                    @Override
                    public void onResponse(String response, int id) {
                        CLog.e("testing","修改订单状态"+response);
                        try {
                            if(Json_Utils.getCode(response)==0){
                                if(state==1) {
                                    order.setState(1);//"已取消"
                                    order.setStateName("已取消");
                                    mOutCancel.setText("取消时间");
                                    mBottomLayout.setVisibility(View.GONE);
                                }else if(state==5){
                                    order.setState(5);//"已完成"
                                    order.setStateName("已完成");
                                    mBottomLayout.setVisibility(View.GONE);
                                }
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                });
    }


}
