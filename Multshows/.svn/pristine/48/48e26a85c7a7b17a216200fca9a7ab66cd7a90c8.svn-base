package com.multshows.Activity;

import android.app.Dialog;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.provider.MediaStore;
import android.support.v7.app.AppCompatActivity;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.google.gson.Gson;
import com.multshows.Beans.ImageInfo;
import com.multshows.Beans.MapEvent_Model;
import com.multshows.Beans.Photo_ImageItem_Beans;
import com.multshows.Beans.ShowsAdd;
import com.multshows.Login_Static;
import com.multshows.R;
import com.multshows.Utils.CLog;
import com.multshows.Utils.Emoji_Change;
import com.multshows.Utils.HideInputManager_Utils;
import com.multshows.Utils.Json_Utils;
import com.multshows.Utils.MySystemBarTintManage_Utils;
import com.multshows.Utils.NetUtil;
import com.multshows.Utils.OKHttp;
import com.multshows.Utils.Photo_Bimp;
import com.multshows.Utils.SavePicture_toLocal_Utils;
import com.multshows.Utils.SaveSharedPreferences;
import com.multshows.Views.HintText_Dialog;
import com.multshows.Views.MyApplication;
import com.multshows.Views.MyGridView;
import com.multshows.Views.MyPicPopupWindow;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.StringCallback;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.json.JSONException;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;

import okhttp3.Call;

/**
 * 描述：发布闲置页
 * 作者：李萧萧
 * 时间：2016.10/3
 */
public class Release_Idle_Activity extends AppCompatActivity {
    EditText mRelease_IdleTitle;//发布闲置标题
    EditText mRelease_IdleContent;//发布闲置内容
    TextView mIdleAddressText;//发布闲置地址
    EditText mIdleAddressText2;//发布闲置地址
    EditText mIdlePrice;//发布闲置价格
    EditText mIdle_Freightprice;//发布闲置运费价格
    ImageView mRelease_return;//返回
    TextView mIdleNum;//发布闲置数量
    TextView mIdle_num_reduce;//发布闲置数量减号
    TextView mIdle_num_add;//发布闲置数量加号
    RelativeLayout mPlace;//地点
    RelativeLayout IdleAddressText2Layout;//地点
    TextView mReleaseIdleButton;//发布按钮
    private int idleNum = 1;//商品数量
    MyGridView imageIdGridview;//选择图片显示
    Gson mGson = new Gson();
    int flag_upload = 0;//记录上传图片个数，用于判断是否上传所有
    String Imageurl = "";//上传图片地址
    Dialog mDialog;//消息提示框
    Emoji_Change mEmoji_change = new Emoji_Change();//表情，匹配符替换类
    private GridAdapter adapter;
    MyPicPopupWindow mPopWindow;
    Uri photoUri;
    MyApplication myApplication;
    SaveSharedPreferences mSave = new SaveSharedPreferences();
    //限制运费只能两位小数

    public View.OnClickListener itemsOnClick = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            switch (v.getId()) {
                case R.id.lookPhoto_dialog_Top:
                    photo();
                    break;
                case R.id.lookPhoto_dialog_Center:
                    Intent intent = new Intent(Release_Idle_Activity.this, Photo_Album_Activity.class);
                    intent.putExtra("userId", Login_Static.myUserID);
                    startActivity(intent);
                    // overridePendingTransition(R.anim.activity_translate_in, R.anim.activity_translate_out);
                    break;
                default:
                    break;
            }
            mPopWindow.dismiss();
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_idle_activity);
        EventBus.getDefault().register(Release_Idle_Activity.this);
        myApplication= (MyApplication) getApplication();
        initView();
        initdata();
        initLister();
    }

    //初始化数据
    private void initdata() {
        MySystemBarTintManage_Utils tintManageUtils = new MySystemBarTintManage_Utils();
        tintManageUtils.setSystemBarTintManage(Release_Idle_Activity.this, R.color.green);
        mIdlePrice.addTextChangedListener(new TextWatcher() {
            public void afterTextChanged(Editable edt) {
                String temp = edt.toString();
                int posDot = temp.indexOf(".");
                if (posDot <= 0) return;
                if (temp.length() - posDot - 1 > 2) {
                    edt.delete(posDot + 3, posDot + 4);
                }
            }

            public void beforeTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {
            }

            public void onTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {
            }
        });
        mIdle_Freightprice.addTextChangedListener(new TextWatcher() {
            public void afterTextChanged(Editable edt) {
                String temp = edt.toString();
                int posDot = temp.indexOf(".");
                if (posDot <= 0) return;
                if (temp.length() - posDot - 1 > 2) {
                    edt.delete(posDot + 3, posDot + 4);
                }
            }

            public void beforeTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {
            }

            public void onTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {
            }
        });
        mDialog = new HintText_Dialog(Release_Idle_Activity.this, R.style.MyDialog);
        imageIdGridview.setSelector(new ColorDrawable(Color.TRANSPARENT));
        adapter = new GridAdapter(this, "no");
        adapter.update();
        imageIdGridview.setAdapter(adapter);
    }

    private static final int TAKE_PICTURE = 0x000001;

    public void photo() {
        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        SimpleDateFormat timeStampFormat = new SimpleDateFormat(
                "yyyy_MM_dd_HH_mm_ss");
        String filename = timeStampFormat.format(new Date());
        ContentValues values = new ContentValues();
        values.put(MediaStore.Images.Media.TITLE, filename);

        photoUri = getContentResolver().insert(
                MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);

        intent.putExtra(MediaStore.EXTRA_OUTPUT, photoUri);
        startActivityForResult(intent, TAKE_PICTURE);
    }

    /**
     * 监听事件
     */
    private void initLister() {
        //地点选择界面
        mPlace.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(Release_Idle_Activity.this, Map_Activity.class);
                startActivity(intent);
            }
        });
        mReleaseIdleButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (VerificationParameters()) {
                    mDialog.show();
                    HintText_Dialog hint = new HintText_Dialog(Release_Idle_Activity.this, getString(R.string.release), "");
                    if (Photo_Bimp.albumSelectBitmap.size() != 0) {
                        new Thread(new Runnable() {
                            @Override
                            public void run() {
                                UpLoadImage();//上传图片
                            }
                        }).start();

                    } else {
                        showError(getString(R.string.pictureNum), 0);
                    }
                }

            }
        });
        mRelease_return.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Photo_Bimp.albumSelectBitmap.clear();
                Photo_Bimp.taskSelectBitmap.clear();
                Photo_Bimp.tempSelectBitmap.clear();
                HideInputManager_Utils.hideInputManager(Release_Idle_Activity.this);
                finish();
            }
        });
        //商品数量增加
        mIdle_num_add.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                idleNum++;
                if (idleNum <= 99) {
                    mIdleNum.setText(idleNum + "");
                }else {
                    mDialog.show();
                    showError("商品数量不能高于99", 0);
                }
            }
        });
        //商品数量减少
        mIdle_num_reduce.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (idleNum > 1) {
                    idleNum--;
                    mIdleNum.setText(idleNum + "");
                } else {
                    mDialog.show();
                    showError("商品数量不能低于1", 0);
                }
            }
        });
        imageIdGridview.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                if (position == Photo_Bimp.albumSelectBitmap.size()) {
                    //底部弹出框
                    //实例化MyPicPopupWindow
                    //底部弹出框
                    //实例化MyPicPopupWindow
                    HideInputManager_Utils.hideInputManager(Release_Idle_Activity.this);
                    mPopWindow = new MyPicPopupWindow(Release_Idle_Activity.this, itemsOnClick,
                            "拍照", "手机相册", "", "");
                    //设置弹出动画效果
                   // mPopWindow.setAnimationStyle(R.style.PopupAnimation);
                    //显示窗口  //设置layout在PopupWindow中显示的位置
                    mPopWindow.showAtLocation(findViewById(R.id.Id_Layout),
                            Gravity.BOTTOM, 0, 0);
                } else {
                    /*Intent intent = new Intent(Release_Work_Activity.this,
                            Photo_Show_Activity.class);
                    intent.putExtra("position", "1");
                    intent.putExtra("ID", arg2);
                    startActivity(intent);*/
                }
            }
        });
    }

    /**
     * 初始化控件
     */
    private void initView() {
        mRelease_IdleTitle = (EditText) findViewById(R.id.Release_IdleTitle);
        mRelease_IdleContent = (EditText) findViewById(R.id.Release_IdleContent);
        mIdleAddressText = (TextView) findViewById(R.id.IdleAddressText);
        mIdleAddressText2 = (EditText) findViewById(R.id.IdleAddressText2);
        mIdlePrice = (EditText) findViewById(R.id.IdlePrice);
        mIdle_Freightprice = (EditText) findViewById(R.id.Idle_Freightprice);
        mIdleNum = (TextView) findViewById(R.id.IdleNum);
        mIdle_num_reduce = (TextView) findViewById(R.id.Idle_num_reduce);
        mIdle_num_add = (TextView) findViewById(R.id.Idle_num_add);
        mReleaseIdleButton = (TextView) findViewById(R.id.ReleaseIdleButton);
        mRelease_return = (ImageView) findViewById(R.id.Release_return);
        imageIdGridview = (MyGridView) findViewById(R.id.imageIdGridview);
        mPlace = (RelativeLayout) findViewById(R.id.Release_workContent_Place);
        IdleAddressText2Layout= (RelativeLayout) findViewById(R.id.IdleAddressText2Layout);
    }

    //选择图片显示gridview显示图片
    public class GridAdapter extends BaseAdapter {
        private LayoutInflater inflater;
        private int selectedPosition = -1;
        private boolean shape;
        String deleteList;

        public boolean isShape() {
            return shape;
        }

        public void setShape(boolean shape) {
            this.shape = shape;
        }

        public GridAdapter(Context context, String sDelete) {
            inflater = LayoutInflater.from(context);
            deleteList = sDelete;
        }

        public void update() {
            loading();
        }

        public int getCount() {
            if (Photo_Bimp.albumSelectBitmap.size() == 9) {
                return 9;
            }
            return (Photo_Bimp.albumSelectBitmap.size() + 1);
        }

        public Object getItem(int arg0) {
            return null;
        }

        public long getItemId(int arg0) {
            return 0;
        }

        public void setSelectedPosition(int position) {
            selectedPosition = position;
        }

        public int getSelectedPosition() {
            return selectedPosition;
        }

        public View getView(final int position, View convertView, ViewGroup parent) {
            ViewHolder holder = null;
            if (convertView == null) {
                convertView = inflater.inflate(R.layout.adapter_releasegridview,
                        parent, false);
                holder = new ViewHolder();
                holder.image = (ImageView) convertView.findViewById(R.id.item_grida_image);
                holder.mDelete = (ImageView) convertView.findViewById(R.id.item_grida_image_delete);
                convertView.setTag(holder);
            } else {
                holder = (ViewHolder) convertView.getTag();
            }
            if (position == Photo_Bimp.albumSelectBitmap.size()) {
                holder.image.setImageBitmap(BitmapFactory.decodeResource(
                        getResources(), R.drawable.upimg_logo));
                holder.mDelete.setVisibility(View.INVISIBLE);
                if (position == 9) {
                    holder.image.setVisibility(View.GONE);
                }
            } else {
                holder.image.setImageBitmap(Photo_Bimp.albumSelectBitmap.get(position).getBitmap());
                holder.mDelete.setVisibility(View.VISIBLE);
            }
            //点击删除事件
            holder.mDelete.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    //Photo_Bimp.tempSelectBitmap.remove(position);
                    Photo_Bimp.albumSelectBitmap.remove(position);
                    v.setVisibility(View.GONE);
                    adapter.notifyDataSetChanged();
                }
            });
            return convertView;
        }

        public class ViewHolder {
            public ImageView image;
            public ImageView mDelete;
        }

        Handler handler = new Handler() {
            public void handleMessage(Message msg) {
                switch (msg.what) {
                    case 1:
                        adapter.notifyDataSetChanged();
                        break;
                }
                super.handleMessage(msg);
            }
        };

        public void loading() {
            new Thread(new Runnable() {
                public void run() {
                    while (true) {
                        if (Photo_Bimp.max == Photo_Bimp.albumSelectBitmap.size()) {
                            Message message = new Message();
                            message.what = 1;
                            handler.sendMessage(message);
                            break;
                        } else {
                            Photo_Bimp.max += 1;
                            Message message = new Message();
                            message.what = 1;
                            handler.sendMessage(message);
                        }
                    }
                }
            }).start();
        }
    }

    //发送图片
    @Subscribe
    public void onEvent(MapEvent_Model model) {
        //Log.e("LOLOLOL", model.getIdle_Place().toString());
        if(model.getIdle_Place()!=null) {
            mIdleAddressText2.setText(model.getIdle_Place().getPoiTitle());
            IdleAddressText2Layout.setVisibility(View.VISIBLE);
            mIdleAddressText.setText(model.getIdle_Place().getPoiProvince()+" "+
                    model.getIdle_Place().getPoiCity()+" "+model.getIdle_Place().getPoiAdName());
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        EventBus.getDefault().unregister(Release_Idle_Activity.this);
    }

    //上传图片封装函数
    public void UpLoadImage() {
        File file = null;
        int count=Photo_Bimp.albumSelectBitmap.size();
        for (int i = 0; i < count; i++) {

            try {
                file = SavePicture_toLocal_Utils.saveCacheFile(Photo_Bimp.albumSelectBitmap.get(i).getBitmap(),
                        Login_Static.myUserID + System.currentTimeMillis() + ".png",
                        Release_Idle_Activity.this);
                byte[] bytes = NetUtil.getByte(file);
                int[] pic = new int[bytes.length];
                //加128，去掉符号位
                for (int a = 0; a < pic.length; a++) {
                    pic[a] = bytes[a] & 0xff;
                }


                ImageInfo imageInfo = new ImageInfo();
                imageInfo.setExt(".png");
                imageInfo.setFileData(pic);
                imageInfo.setTemp(false);
                imageInfo.setMaxWidth(480);
                imageInfo.setMaxHeight(800);
                String data = mGson.toJson(imageInfo);
                CLog.e("testing", "上传图片" + data);
                //上传头像图片
                OkHttpUtils.postString()
                        .url(myApplication.getFileUrl())
                        .mediaType(okhttp3.MediaType.parse("application/json"))
                        .content(data)
                        //.addParams("", request)
                        .build()
                        .execute(new StringCallback() {
                            @Override
                            public void onError(Call call, Exception e, int id) {
                                CLog.e("testing", "上传图片失败：" + e.toString());
                                showError("发布闲置失败", 0);
                            }

                            @Override
                            public void onResponse(String response, int id) {


                                try {
                                    if (Json_Utils.getIsUploadSuc(response)) {
                                        flag_upload++;
                                        CLog.e("testing", "上传图片成功：" + response);
                                    }
                                    if (flag_upload != Photo_Bimp.albumSelectBitmap.size()) {
                                        Imageurl = Imageurl + (Json_Utils.getMessage(response)) + ",";
                                    } else {
                                        Imageurl = Imageurl + Json_Utils.getMessage(response);
                                        CLog.e("testing", "flag_upload==" + flag_upload);
                                        setReleaseIDle();
                                    }

                                } catch (JSONException e) {
                                    e.printStackTrace();
                                }

                            }
                        });

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }

    //发布闲置
    public void setReleaseIDle() {
        ShowsAdd mShowsAdd = new ShowsAdd();
        mShowsAdd.setUserId(Login_Static.myUserID);
        mShowsAdd.setShowsType(2);
        mShowsAdd.setTitle(mEmoji_change.EmojiChange(mRelease_IdleTitle.getText().toString()));
        mShowsAdd.setInfos(mEmoji_change.EmojiChange(mRelease_IdleContent.getText().toString()));
        mShowsAdd.setPrice(Double.parseDouble(mIdlePrice.getText().toString()));
        mShowsAdd.setAmount(idleNum);
        mShowsAdd.setShowsPhoto(Imageurl);
        if(!mIdle_Freightprice.getText().toString().equals(""))
        mShowsAdd.setExpressFee(Double.parseDouble(mIdle_Freightprice.getText().toString()));
        else {
            mShowsAdd.setExpressFee(0);
        }
        if(!mIdleAddressText2.getText().toString().equals("")){
            String mAddress=mIdleAddressText.getText().toString().replace(" ","");
            mShowsAdd.setAddress(mAddress+" "+mIdleAddressText2.getText().toString());
        }else {
            mShowsAdd.setAddress(mIdleAddressText.getText().toString());
        }

        mShowsAdd.setIsSale(1);
        mShowsAdd.setIsShow(1);
        mShowsAdd.setIsOver(0);
        String data = mGson.toJson(mShowsAdd);
        CLog.e("data", data);
        OKHttp.OkHttpPost("/Shows/AddShows", "", data, new StringCallback() {
            @Override
            public void onError(Call call, Exception e, int id) {
                CLog.e("testing", "错误");
                showError("发布闲置失败", 0);
            }

            @Override
            public void onResponse(String response, int id) {
                CLog.e("testing", "changeNickName:" + response);
                try {
                    if (Json_Utils.getCode(response) == 0) {
                        showError("发布闲置成功", 1);
                    } else {
                        showError("发布闲置失败", 0);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    @Override
    protected void onResume() {
        super.onResume();
        //adapter = new GridAdapter(this);
        adapter.notifyDataSetChanged();
        // imageGridview.setAdapter(adapter);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            Photo_Bimp.albumSelectBitmap.clear();
            Photo_Bimp.taskSelectBitmap.clear();
            Photo_Bimp.tempSelectBitmap.clear();
            finish();
        }

        return false;

    }

    //发布结果提示
    public void showError(String errorString, final int is) {
        String isString = null;
        if (is == 1) {
            isString = "success";
        }
        if (is == 0) {
            isString = "fail";
        }
        HintText_Dialog hint = new HintText_Dialog(Release_Idle_Activity.this, errorString, isString);
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                //得到返回值后，2秒后加载框消失
                if (is == 1) {
                    Photo_Bimp.albumSelectBitmap.clear();
                    Photo_Bimp.taskSelectBitmap.clear();
                    Photo_Bimp.tempSelectBitmap.clear();
                    mSave.Save_PREFS(Release_Idle_Activity.this, "intent", "idle");//标记发布成功，主页显示的fragment
                    finish();
                }
                mDialog.dismiss();
            }
        }, 2000);
    }

    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        switch (requestCode) {
            case TAKE_PICTURE:
                if (Photo_Bimp.albumSelectBitmap.size() < 9 && resultCode == RESULT_OK) {
                /*String fileName = String.valueOf(System.currentTimeMillis());
				Bitmap bm = (Bitmap) data.getExtras().get("data");
				FileUtils.saveBitmap(bm, fileName);*/
                    //这里开始的第二部分，获取图片的存储路径：
                    String[] proj = {MediaStore.Images.Media.DATA};
                    //好像是android多媒体数据库的封装接口，具体的看Android文档
                    Cursor cursor = managedQuery(photoUri, proj, null, null, null);
                    //按我个人理解 这个是获得用户选择的图片的索引值
                    int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
                    //将光标移至开头 ，这个很重要，不小心很容易引起越界
                    cursor.moveToFirst();
                    //最后根据索引值获取图片路径
                    String path = cursor.getString(column_index);
                    Photo_ImageItem_Beans takePhoto = new Photo_ImageItem_Beans();
                    takePhoto.setImagePath(path);
                    Photo_Bimp.tempSelectBitmap.add(takePhoto);
                    Photo_Bimp.albumSelectBitmap = Photo_Bimp.tempSelectBitmap;
                }
                break;
        }
    }

    /**
     * 验证参数函数
     */
    private Boolean VerificationParameters() {
        Boolean falg = true;
        Boolean falg2 = false;
        if (mRelease_IdleTitle != null && mRelease_IdleTitle.getText().toString().equals("")) {
            falg = false;

        }
        if (mRelease_IdleContent != null && mRelease_IdleContent.getText().toString().equals("")) {
            falg = false;

        }
        if (mIdlePrice != null && mIdlePrice.getText().toString().equals("")) {
            falg = false;
        }
        if(mIdle_Freightprice.getText().toString().equals("0")||mIdle_Freightprice.getText().toString().equals("0.0")||mIdle_Freightprice.getText().toString().equals("0.00")){
            falg2=true;
            falg = false;
            mDialog.show();
            showError("邮费不能为0", 0);
        }
        if(mIdlePrice.getText().toString().equals("0")||mIdlePrice.getText().toString().equals("0.0")||mIdlePrice.getText().toString().equals("0.00")){
            falg2=true;
            falg = false;
            mDialog.show();
            showError("价格不能为0", 0);
        }
        String[] res = mRelease_IdleTitle.getText().toString().split("\n");
        String[] res2 = mRelease_IdleTitle.getText().toString().split(" ");
        String[] res1 = mRelease_IdleContent.getText().toString().split("\n");
        String[] res3 = mRelease_IdleContent.getText().toString().split(" ");
        CLog.e("res",res.length+"");
        CLog.e("res1",res1.length+"");
        CLog.e("res2",res2.length+"");
        CLog.e("res3",res3.length+"");
        if((res.length>3&&res2.length>=5)||(res1.length>4&&res3.length>5)){
            mDialog.show();
            showError(this.getString(R.string.noPass),0);
            falg2 = false;
            falg = false;
            mRelease_IdleTitle.setText("");
            mRelease_IdleContent.setText("");
        }
        if (!falg&&!falg2) {
            mDialog.show();
            showError(this.getString(R.string.NoRelease), 0);
        }
        return falg;
    }
}
