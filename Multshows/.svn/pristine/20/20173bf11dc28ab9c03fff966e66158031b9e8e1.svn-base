package com.multshows.Activity;

import android.app.Dialog;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.provider.MediaStore;
import android.support.v7.app.AppCompatActivity;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.Gson;
import com.multshows.Beans.Activity;
import com.multshows.Beans.ActivityAdd;
import com.multshows.Beans.ImageInfo;
import com.multshows.Beans.Photo_ImageItem_Beans;
import com.multshows.Beans.UserAuthentication;
import com.multshows.Login_Static;
import com.multshows.R;
import com.multshows.Utils.CLog;
import com.multshows.Utils.Emoji_Change;
import com.multshows.Utils.HideInputManager_Utils;
import com.multshows.Utils.Json_Utils;
import com.multshows.Utils.MySystemBarTintManage_Utils;
import com.multshows.Utils.NetUtil;
import com.multshows.Utils.OKHttp;
import com.multshows.Utils.Photo_Bimp;
import com.multshows.Utils.PublicWay;
import com.multshows.Utils.Res;
import com.multshows.Utils.SavePicture_toLocal_Utils;
import com.multshows.Utils.SaveSharedPreferences;
import com.multshows.Utils.Time_Now;
import com.multshows.Views.ChangeClosingdateDialog;
import com.multshows.Views.Dialog_Hint;
import com.multshows.Views.HintText_Dialog;
import com.multshows.Views.MyApplication;
import com.multshows.Views.MyGridView;
import com.multshows.Views.MyPicPopupWindow;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.StringCallback;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import okhttp3.Call;

/**
 * 描述：发布活动页
 * 作者：李萧萧
 * 时间：2016.10/1
 */
public class Release_Activity_Activity extends AppCompatActivity {

    MyPicPopupWindow mPopWindow;//选择照片方式弹出框
    private MyGridView noScrollgridview;
    private GridAdapter adapter;
    public static Bitmap bimap;
    Uri photoUri;
    Dialog_Hint hintText_dialog;
    MyApplication mMyApplication ;
    Gson mGson = new Gson();
    RelativeLayout mStartimeLayout;//开始时间布局监听弹出选择时间对话框
    RelativeLayout mStoptimeLayout;//结束布局监听弹出选择时间对话框
    RelativeLayout mAbortLayout;//开始布局监听弹出选择时间对话框
    Button closeButton;//发布活动
    TextView releaseActivity;//发布活动
    TextView mStarTime;//开始活动时间Text
    TextView mStopTime;//结束活动时间Text
    TextView mAbortTime;//活动截止时间Text
    EditText mActivityTitle;//活动标题Text
    EditText mActivityDetails;//活动标题详情
    EditText mActivityAddress;//活动地址
    ImageView mReturn;//返回
    Activity mActivity;//接收活动详细信息
    int flag_upload = 0;//记录上传图片个数，用于判断是否上传所有
    String Imageurl = "";//上传图片地址
    Dialog mDialog;//消息提示框
    Emoji_Change mEmoji_change = new Emoji_Change();//表情，匹配符替换类
    SaveSharedPreferences mSave = new SaveSharedPreferences();
    MyApplication mApplication ;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_release_activity);
        Res.init(this);
        PublicWay.activityList.add(this);
        mMyApplication= (MyApplication) getApplication();
        mApplication= (MyApplication) getApplication();
        initView();
        initData();
        initLister();
    }

    private void initData() {
        MySystemBarTintManage_Utils tintManageUtils = new MySystemBarTintManage_Utils();
        tintManageUtils.setSystemBarTintManage(Release_Activity_Activity.this, R.color.green);
        mDialog = new HintText_Dialog(Release_Activity_Activity.this, R.style.MyDialog);
        Bundle bundle = getIntent().getExtras();//.getExtras()得到intent所附带的额外数据
        if (bundle != null) {
            mActivity = (Activity) bundle.getSerializable("activity");//getString()返回指定key的值
        }
        noScrollgridview.setSelector(new ColorDrawable(Color.TRANSPARENT));
        adapter = new GridAdapter(this, "no");
        adapter.update();
        noScrollgridview.setAdapter(adapter);
        if (mActivity != null) {
            mStarTime.setText(mActivity.getBeginTimeStr());
            mStopTime.setText(mActivity.getEndTimeStr());
            mAbortTime.setText(mActivity.getSignDeadlineStr());
            mActivityTitle.setText(mActivity.getTitle());
            mActivityAddress.setText(mActivity.getLocation());
            mActivityDetails.setText(mActivity.getInfos());
            releaseActivity.setText("修改");
            closeButton.setVisibility(View.VISIBLE);
        }
    }

    //时间监听
    private void initLister() {
        mReturn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Photo_Bimp.albumSelectBitmap.clear();
                Photo_Bimp.taskSelectBitmap.clear();
                Photo_Bimp.tempSelectBitmap.clear();
                HideInputManager_Utils.hideInputManager(Release_Activity_Activity.this);
                finish();
            }
        });
        noScrollgridview.setOnItemClickListener(new AdapterView.OnItemClickListener() {

            public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
                                    long arg3) {
                if (arg2 == Photo_Bimp.albumSelectBitmap.size()) {
                    //底部弹出框
                    //实例化MyPicPopupWindow
                    HideInputManager_Utils.hideInputManager(Release_Activity_Activity.this);//隐藏 键盘
                    mPopWindow = new MyPicPopupWindow(Release_Activity_Activity.this, itemsOnClick,
                            "拍照", "手机相册", "", "");
                    //设置弹出动画效果
                   // mPopWindow.setAnimationStyle(R.style.PopupAnimation);
                    //显示窗口  //设置layout在PopupWindow中显示的位置
                    mPopWindow.showAtLocation(findViewById(R.id.release_activity_Layout),
                            Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL, 0, 0);
                } /*else {
                    Intent intent = new Intent(Release_Activity_Activity.this,
                            Photo_Album_Activity.class);
                    intent.putExtra("position", "1");
                    intent.putExtra("ID", arg2);
                    startActivity(intent);
                }*/
            }
        });
//发布活动监听
        releaseActivity.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //发布活动
                if (releaseActivity.getText().equals("发布")) {
                    getState();

                }
                //修改活动
                if (releaseActivity.getText().equals("修改")) {
                    if (VerificationParameters()) {
                        ActivityAdd activityAdd = new ActivityAdd(Login_Static.myUserID, mEmoji_change.EmojiChange(mActivityTitle.getText().toString()), mEmoji_change.EmojiChange(mActivityDetails.getText().toString()), Imageurl, mEmoji_change.EmojiChange(mActivityAddress.getText().toString()),
                                Time_Now.getIntTime(mAbortTime.getText().toString()), Time_Now.getIntTime(mStarTime.getText().toString()), Time_Now.getIntTime(mStopTime.getText().toString()), 1, true);
                        String data = mGson.toJson(activityAdd);
                        OKHttp.OkHttpPost("/Activity/UpdateActivity", "", data, new StringCallback() {
                            @Override
                            public void onError(Call call, Exception e, int id) {
                                CLog.e("testing", "错误");
                            }

                            @Override
                            public void onResponse(String response, int id) {
                                CLog.e("testing", "changeNickName:" + response);
                                try {
                                    if (Json_Utils.getCode(response) == 0) {

                                    }
                                } catch (JSONException e) {
                                    e.printStackTrace();
                                }
                            }
                        });
                    }

                }

            }
        });
//开点击始时间布局，选择开始时间
        mStartimeLayout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ShowStarTimeDialog();
            }
        });//开点击始时间布局，选择开始时间
        mStoptimeLayout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ShowStopTimeDialog();
            }
        });
        mAbortLayout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ShowAbortTimeDialog();
            }
        });
        closeButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                OkHttpUtils.get().url(mApplication.getUrl() + "/Activity/CancelActivity")
                        .addParams("activityId", mActivity.getId())
                        .build()
                        .execute(new StringCallback() {
                            @Override
                            public void onError(Call call, Exception e, int id) {

                            }

                            @Override
                            public void onResponse(String response, int id) {
                                CLog.e("testing", response);
                                JSONObject jsonObject = null;
                                try {
                                    if (Json_Utils.getCode(response) == 0) {
                                        showError("关闭活动成功",2);
                                    } else {
                                        //后期判断错误原因
                                        Toast.makeText(Release_Activity_Activity.this, "获取失败", Toast.LENGTH_SHORT).show();
                                    }
                                } catch (JSONException e) {
                                    e.printStackTrace();
                                }

                            }
                        });
            }
        });

    }

    private void initView() {
        noScrollgridview = (MyGridView) findViewById(R.id.noScrollgridview);
        closeButton = (Button) findViewById(R.id.closeButton);
        mReturn = (ImageView) findViewById(R.id.Release_return);
        mStartimeLayout = (RelativeLayout) findViewById(R.id.StartimeLayout);
        mStoptimeLayout = (RelativeLayout) findViewById(R.id.StoptimeLayout);
        mAbortLayout = (RelativeLayout) findViewById(R.id.AbortLayout);
        mStarTime = (TextView) findViewById(R.id.StarTime);
        mAbortTime = (TextView) findViewById(R.id.AbortTime);
        mStopTime = (TextView) findViewById(R.id.StopTime);
        mActivityTitle = (EditText) findViewById(R.id.activityTitle);
        mActivityDetails = (EditText) findViewById(R.id.ActivityDetails);
        mActivityAddress = (EditText) findViewById(R.id.ActivityAddress);
        releaseActivity = (TextView) findViewById(R.id.releaseActivity);

    }

    //为弹出窗口实现监听类
    public View.OnClickListener itemsOnClick = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            switch (v.getId()) {
                case R.id.lookPhoto_dialog_Top:
                        photo();
                    break;
                case R.id.lookPhoto_dialog_Center:

                        Intent intent = new Intent(Release_Activity_Activity.this, Photo_Album_Activity.class);
                        intent.putExtra("userId", Login_Static.myUserID);
                        startActivity(intent);

                    // overridePendingTransition(R.anim.activity_translate_in, R.anim.activity_translate_out);
                    break;
                default:
                    break;
            }
            mPopWindow.dismiss();
        }
    };

    //选择图片显示gridview显示图片
    public class GridAdapter extends BaseAdapter {
        private LayoutInflater inflater;
        private int selectedPosition = -1;
        private boolean shape;
        String deleteList;

        public boolean isShape() {
            return shape;
        }

        public void setShape(boolean shape) {
            this.shape = shape;
        }

        public GridAdapter(Context context, String sDelete) {
            inflater = LayoutInflater.from(context);
            deleteList = sDelete;
        }

        public void update() {
            loading();
        }

        public int getCount() {
            if (Photo_Bimp.albumSelectBitmap.size() == 9) {
                return 9;
            }
            return (Photo_Bimp.albumSelectBitmap.size() + 1);
        }

        public Object getItem(int arg0) {
            return null;
        }

        public long getItemId(int arg0) {
            return 0;
        }

        public void setSelectedPosition(int position) {
            selectedPosition = position;
        }

        public int getSelectedPosition() {
            return selectedPosition;
        }

        public View getView(final int position, View convertView, ViewGroup parent) {
            ViewHolder holder = null;
            if (convertView == null) {
                convertView = inflater.inflate(R.layout.adapter_releasegridview,
                        parent, false);
                holder = new ViewHolder();
                holder.image = (ImageView) convertView.findViewById(R.id.item_grida_image);
                holder.mDelete = (ImageView) convertView.findViewById(R.id.item_grida_image_delete);
                convertView.setTag(holder);
            } else {
                holder = (ViewHolder) convertView.getTag();
            }
            if (position == Photo_Bimp.albumSelectBitmap.size()) {
                holder.image.setImageBitmap(BitmapFactory.decodeResource(
                        getResources(), R.drawable.upimg_logo));
                holder.mDelete.setVisibility(View.INVISIBLE);
                if (position == 9) {
                    holder.image.setVisibility(View.GONE);
                }
            } else {
                holder.image.setImageBitmap(Photo_Bimp.albumSelectBitmap.get(position).getBitmap());
                holder.mDelete.setVisibility(View.VISIBLE);
            }
            //点击删除事件
            holder.mDelete.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    //Photo_Bimp.tempSelectBitmap.remove(position);
                    Photo_Bimp.albumSelectBitmap.remove(position);
                    v.setVisibility(View.GONE);
                    adapter.notifyDataSetChanged();
                }
            });
            return convertView;
        }

        public class ViewHolder {
            public ImageView image;
            public ImageView mDelete;
        }

        Handler handler = new Handler() {
            public void handleMessage(Message msg) {
                switch (msg.what) {
                    case 1:
                        adapter.notifyDataSetChanged();
                        break;
                }
                super.handleMessage(msg);
            }
        };

        public void loading() {
            new Thread(new Runnable() {
                public void run() {
                    while (true) {
                        if (Photo_Bimp.max == Photo_Bimp.albumSelectBitmap.size()) {
                            Message message = new Message();
                            message.what = 1;
                            handler.sendMessage(message);
                            break;
                        } else {
                            Photo_Bimp.max += 1;
                            Message message = new Message();
                            message.what = 1;
                            handler.sendMessage(message);
                        }
                    }
                }
            }).start();
        }
    }

    protected void onRestart() {

        super.onRestart();
    }


    //上传图片封装函数
    public void UpLoadImage() {
        File file = null;
        for (int i = 0; i < Photo_Bimp.albumSelectBitmap.size(); i++) {
            try {

                file = SavePicture_toLocal_Utils.saveCacheFile(Photo_Bimp.albumSelectBitmap.get(i).getBitmap(),
                        Login_Static.myUserID + System.currentTimeMillis() + ".png",
                        Release_Activity_Activity.this);
                byte[] bytes = NetUtil.getByte(file);
                int[] pic = new int[bytes.length];
                //加128，去掉符号位
                for (int a = 0; a < pic.length; a++) {
                    pic[a] = bytes[a] & 0xff;
                }

                ImageInfo imageInfo = new ImageInfo();
                imageInfo.setExt(".png");
                imageInfo.setFileData(pic);
                imageInfo.setTemp(false);
                imageInfo.setMaxWidth(480);
                imageInfo.setMaxHeight(800);
                String data = mGson.toJson(imageInfo);
                CLog.e("testing", "上传图片" + data);
                //上传头像图片
                OkHttpUtils.postString()
                        .url(mMyApplication.getFileUrl())
                        .mediaType(okhttp3.MediaType.parse("application/json"))
                        .content(data)
                        //.addParams("", request)
                        .build()
                        .execute(new StringCallback() {
                            @Override
                            public void onError(Call call, Exception e, int id) {
                                CLog.e("testing", "上传图片失败：" + e.toString());
                            }

                            @Override
                            public void onResponse(String response, int id) {


                                try {
                                    if (Json_Utils.getIsUploadSuc(response)) {
                                        flag_upload++;
                                        CLog.e("testing", "上传图片成功：" + response);
                                    }
                                    if (flag_upload != Photo_Bimp.albumSelectBitmap.size()) {
                                        Imageurl = Imageurl + (Json_Utils.getMessage(response)) + ",";
                                    } else {
                                        Imageurl = Imageurl + Json_Utils.getMessage(response);
                                        CLog.e("testing", "flag_upload==" + flag_upload);
                                        ReleaseActivity();
                                    }

                                } catch (JSONException e) {
                                    e.printStackTrace();
                                }

                            }
                        });

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }

    //发布作品
    public void ReleaseActivity() {
        ActivityAdd activityAdd = new ActivityAdd(Login_Static.myUserID, mEmoji_change.EmojiChange(mActivityTitle.getText().toString()), mEmoji_change.EmojiChange(mActivityDetails.getText().toString()), Imageurl, mEmoji_change.EmojiChange(mActivityAddress.getText().toString()),
                Time_Now.getIntTime(mAbortTime.getText().toString()), Time_Now.getIntTime(mStarTime.getText().toString()), Time_Now.getIntTime(mStopTime.getText().toString()), 1, true);
        String data = mGson.toJson(activityAdd);
        CLog.e("data", data);
        OKHttp.OkHttpPost("/Activity/AddActivity", "", data, new StringCallback() {
            @Override
            public void onError(Call call, Exception e, int id) {
                showError("发布活动失败", 0);

            }

            @Override
            public void onResponse(String response, int id) {
                CLog.e("testing", "changeNickName:" + response);
                flag_upload = 0;
                try {
                    if (Json_Utils.getCode(response) == 0) {
                        showError("发布成功", 1);
                    } else {
                        showError("发布活动失败", 0);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        });
    }
  /*  protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        switch (requestCode) {
            case TAKE_PICTURE:
                if (Bimp.tempSelectBitmap.size() < 9 && resultCode == RESULT_OK) {

                    String fileName = String.valueOf(System.currentTimeMillis());
                    Bitmap bm = (Bitmap) data.getExtras().get("data");
                    FileUtils.saveBitmap(bm, fileName);

                    ImageItem takePhoto = new ImageItem();
                    takePhoto.setBitmap(bm);
                    Bimp.tempSelectBitmap.add(takePhoto);
                }
                break;
        }
    }*/

    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            Photo_Bimp.albumSelectBitmap.clear();
            Photo_Bimp.taskSelectBitmap.clear();
            Photo_Bimp.tempSelectBitmap.clear();
            finish();
        }
        return true;
    }

    public void ShowStarTimeDialog() {
        ChangeClosingdateDialog mChangeBirthDialog = new ChangeClosingdateDialog(
                Release_Activity_Activity.this);
        Calendar c = Calendar.getInstance();
        mChangeBirthDialog.setDate(c.get(Calendar.YEAR), c.get(Calendar.MONTH) + 1, c.get(Calendar.DATE) + 1);
        mChangeBirthDialog.show();
        mChangeBirthDialog.setClosingdateListener(new ChangeClosingdateDialog.OnClosingdateListener() {

            @Override
            public void onClick(String year, String month, String day, String hour) {
                // TODO Auto-generated method stub
                mStarTime.setText(year + "-" + month + "-" + day + " " + hour + ":00");
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                Date date = null;
                try {
                    date = sdf.parse(year + "-" + month + "-" + day);
                    // endDate = date.getTime();
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public void ShowStopTimeDialog() {
        ChangeClosingdateDialog mChangeBirthDialog = new ChangeClosingdateDialog(
                Release_Activity_Activity.this);
        Calendar c = Calendar.getInstance();
        mChangeBirthDialog.setDate(c.get(Calendar.YEAR), c.get(Calendar.MONTH) + 1, c.get(Calendar.DATE) + 1);
        mChangeBirthDialog.show();
        mChangeBirthDialog.setClosingdateListener(new ChangeClosingdateDialog.OnClosingdateListener() {

            @Override
            public void onClick(String year, String month, String day, String hour) {
                // TODO Auto-generated method stub
                mStopTime.setText(year + "-" + month + "-" + day + " " + hour + ":00");
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                Date date = null;
                try {
                    date = sdf.parse(year + "-" + month + "-" + day);
                    // endDate = date.getTime();
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    private void ShowAbortTimeDialog() {
        ChangeClosingdateDialog mChangeBirthDialog = new ChangeClosingdateDialog(
                Release_Activity_Activity.this);
        Calendar c = Calendar.getInstance();
        mChangeBirthDialog.setDate(c.get(Calendar.YEAR), c.get(Calendar.MONTH) + 1, c.get(Calendar.DATE) + 1);
        mChangeBirthDialog.show();
        mChangeBirthDialog.setClosingdateListener(new ChangeClosingdateDialog.OnClosingdateListener() {

            @Override
            public void onClick(String year, String month, String day, String hour) {
                // TODO Auto-generated method stub
                mAbortTime.setText(year + "-" + month + "-" + day + " " + hour + ":00");
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                Date date = null;
                try {
                    date = sdf.parse(year + "-" + month + "-" + day);
                    // endDate = date.getTime();
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    @Override
    protected void onResume() {
        super.onResume();

        adapter.notifyDataSetChanged();

    }

    private static final int TAKE_PICTURE = 0x000001;

    /**
     * 返回的数据处理
     *
     * @param requestCode
     * @param resultCode
     * @param data
     */
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        switch (requestCode) {
            case TAKE_PICTURE:
                if (Photo_Bimp.albumSelectBitmap.size() < 9 && resultCode == RESULT_OK) {
                /*String fileName = String.valueOf(System.currentTimeMillis());
                Bitmap bm = (Bitmap) data.getExtras().get("data");
				FileUtils.saveBitmap(bm, fileName);*/
                    //这里开始的第二部分，获取图片的存储路径：
                    String[] proj = {MediaStore.Images.Media.DATA};
                    //好像是android多媒体数据库的封装接口，具体的看Android文档
                    Cursor cursor = managedQuery(photoUri, proj, null, null, null);
                    //按我个人理解 这个是获得用户选择的图片的索引值
                    int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
                    //将光标移至开头 ，这个很重要，不小心很容易引起越界
                    cursor.moveToFirst();
                    //最后根据索引值获取图片路径
                    String path = cursor.getString(column_index);
                    Photo_ImageItem_Beans takePhoto = new Photo_ImageItem_Beans();
                    takePhoto.setImagePath(path);
                    Photo_Bimp.albumSelectBitmap.add(takePhoto);
                    Photo_Bimp.albumSelectBitmap = Photo_Bimp.tempSelectBitmap;
                }
                break;
        }
    }

    public void photo() {
        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        SimpleDateFormat timeStampFormat = new SimpleDateFormat(
                "yyyy_MM_dd_HH_mm_ss");
        String filename = timeStampFormat.format(new Date());
        ContentValues values = new ContentValues();
        values.put(MediaStore.Images.Media.TITLE, filename);

        photoUri = getContentResolver().insert(
                MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);

        intent.putExtra(MediaStore.EXTRA_OUTPUT, photoUri);
        startActivityForResult(intent, TAKE_PICTURE);
    }

    /**
     * 验证参数函数
     */
    private Boolean VerificationParameters() {
        Boolean falg = true;
        if (mActivityTitle != null && mActivityTitle.getText().toString().equals("")) {
            falg = false;
            mActivityTitle.setHintTextColor(Color.RED);
        }
        if (mActivityDetails != null && mActivityDetails.getText().toString().equals("")) {
            falg = false;
            mActivityDetails.setHintTextColor(Color.RED);
        }
        if (mActivityAddress != null && mActivityAddress.getText().toString().equals("")) {
            falg = false;
            mActivityAddress.setHintTextColor(Color.RED);
        }
        if (mStarTime != null && mStarTime.getText().toString().equals("")) {
            falg = false;
            mStarTime.setHintTextColor(Color.RED);
        }
        if (mStopTime != null && mStopTime.getText().toString().equals("")) {
            falg = false;
            mStopTime.setHintTextColor(Color.RED);
        }
        if (mAbortTime != null && mAbortTime.getText().toString().equals("")) {
            falg = false;
            mAbortTime.setHintTextColor(Color.RED);
        }
        String[] res = mActivityTitle.getText().toString().split("\n");
        String[] res2 = mActivityTitle.getText().toString().split(" ");
        String[] res1 = mActivityDetails.getText().toString().split("\n");
        String[] res3 = mActivityDetails.getText().toString().split(" ");
        CLog.e("res",res.length+"");
        CLog.e("res1",res1.length+"");
        CLog.e("res2",res2.length+"");
        CLog.e("res3",res3.length+"");
        if((res.length>3&&res2.length>=5)||(res1.length>4&&res3.length>5)){
            mDialog.show();
            showError(this.getString(R.string.noPass),0);
            mActivityDetails.setText("");
            mActivityTitle.setText("");
            falg = false;
        }
        if (falg) {
            Calendar c = Calendar.getInstance();//可以对每个时间域单独修改
            int year = c.get(Calendar.YEAR);
            int month = c.get(Calendar.MONTH) + 1;
            int date = c.get(Calendar.DATE);
            String todayTime = year + "-" + month + "-" + date + " " + "00:00:00";
            CLog.e("todayTime", todayTime);
            CLog.e("todayTime", Time_Now.getStringTime(Time_Now.getIntTime(todayTime) + 86400));
            CLog.e("todayTime", Time_Now.getIntTime(mStarTime.getText().toString()) + "");
            CLog.e("todayTime", (Time_Now.getIntTime(todayTime) + 86400) + "");
            if (Time_Now.getIntTime(mStarTime.getText().toString()) < (Time_Now.getIntTime(todayTime) + 86400)) {
                mDialog.show();
                showError("活动开始时间必须大于今天", 0);
                falg = false;
            } else if (Time_Now.getIntTime(mStarTime.getText().toString()) > Time_Now.getIntTime(mStopTime.getText().toString())) {
                mDialog.show();
                showError("结束时间必须大于活动开始时间", 0);
                falg = false;
            } else if (Time_Now.getIntTime(mAbortTime.getText().toString()) > Time_Now.getIntTime(mStarTime.getText().toString())) {
                mDialog.show();
                showError("截止时间不能超过活动开始时间", 0);
                falg = false;
            }
        } else {
            mDialog.show();
            showError(this.getString(R.string.NoRelease), 0);
        }

        return falg;
    }

    //发布结果提示
    public void showError(String errorString, final int is) {
        String isString = null;
        if (is == 1) {
            isString = "success";
        } if (is == 2) {
            isString = "success";
        }
        if (is == 0) {
            isString = "fail";
        }
        HintText_Dialog hint = new HintText_Dialog(Release_Activity_Activity.this, errorString, isString);
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                //得到返回值后，2秒后加载框消失
                if (is == 1) {
                    Photo_Bimp.albumSelectBitmap.clear();
                    Photo_Bimp.taskSelectBitmap.clear();
                    Photo_Bimp.tempSelectBitmap.clear();
                    mSave.Save_PREFS(Release_Activity_Activity.this, "intent", "activity");//标记发布成功，主页显示的fragment
                    finish();
                }
                if(is==2){
                    Photo_Bimp.albumSelectBitmap.clear();
                    Photo_Bimp.taskSelectBitmap.clear();
                    Photo_Bimp.tempSelectBitmap.clear();
                    mSave.Save_PREFS(Release_Activity_Activity.this, "intent", "activity");//标记发布成功，主页显示的fragment
                    finish();
                }
                mDialog.dismiss();
            }
        }, 2000);
    }
    /**
     * 判断申请状态
     */
    private void getState() {
        OkHttpUtils.get().url(mMyApplication.getUrl() + "/User/GetAuthen")
                .addParams("userId", Login_Static.myUserID)
                .build()
                .execute(new StringCallback() {
                    @Override
                    public void onError(Call call, Exception e, int id) {
                        CLog.e("testing", "获取用户实名认证失败" + e.toString());
                        mDialog.show();
                        showError("获取实名认证信息失败", 0);
                    }

                    @Override
                    public void onResponse(String response, int id) {
                        CLog.e("testing", "获取用户实名认证" + response);
                        try {
                            if (Json_Utils.getCode(response) == 0) {
                                UserAuthentication bean = mGson.fromJson(Json_Utils.getTemplate(response), UserAuthentication.class);
                                if (bean.getUserId() != null && !"null".equals(bean.getUserId()) && !"".equals(bean.getUserId())) {
                                    if (bean.getIsAuthenticated() == 0) {
                                        //0未认证通过
                                        mDialog.show();
                                        showError("实名认证未通过", 0);
                                    } else if (bean.getIsAuthenticated() == 1) {
                                        //1认证通过
                                        if (VerificationParameters()) {
                                            mDialog.show();
                                            HintText_Dialog hint = new HintText_Dialog(Release_Activity_Activity.this, getString(R.string.release), "");
                                            if (Photo_Bimp.albumSelectBitmap.size() != 0) {
                                                new Thread(new Runnable() {
                                                    @Override
                                                    public void run() {
                                                        UpLoadImage();//上传图片
                                                    }
                                                }).start();
                                            } else {
                                                showError(getString(R.string.pictureNum), 0);
                                            }

                                        }
                                    } else if (bean.getIsAuthenticated() == 2) {
                                        //2认证中
                                        mDialog.show();
                                        showError("实名认证审核中无法发布活动,请等待...", 0);
                                    }
                                } else {
                                    //还没认证
//没设置
                                    hintText_dialog = new Dialog_Hint(Release_Activity_Activity.this, 0,
                                            "还未进行实名认证，是否前往实名认证?", new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            hintText_dialog.dismiss();
                                            Intent intent = new Intent(Release_Activity_Activity.this, My_Information_RealName_Activity.class);
                                            startActivity(intent);
                                        }
                                    });
                                    hintText_dialog.show();
                                }
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }

                    }
                });
    }
}
